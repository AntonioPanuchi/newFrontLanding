<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>ROX.VPN ‚Äî –ë—ã—Å—Ç—Ä—ã–π VPN —á–µ—Ä–µ–∑ –±–æ—Ç–∞ Telegram | –ê–Ω–æ–Ω–∏–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç</title>

  <!-- –ò–ö–û–ù–ö–ò -->
  <link rel="icon" type="image/svg+xml" href="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Cdefs%3E%3ClinearGradient id='grad4' x1='0%25' y1='0%25' x2='100%25' y2='100%25'%3E%3Cstop offset='0%25' style='stop-color:%2322c55e;stop-opacity:1' /%3E%3Cstop offset='100%25' style='stop-color:%230ea5e9;stop-opacity:1' /%3E%3C/linearGradient%3E%3C/defs%3E%3Ccircle cx='16' cy='16' r='15' fill='url(%23grad4)'/%3E%3Cellipse cx='16' cy='16' rx='10' ry='6' fill='none' stroke='%23ffffff' stroke-width='2'/%3E%3Cellipse cx='16' cy='16' rx='6' ry='4' fill='none' stroke='%23ffffff' stroke-width='1.5'/%3E%3Ccircle cx='16' cy='16' r='2' fill='%23ffffff'/%3E%3C/svg%3E">
  
  <!-- SEO –∏ Open Graph -->
  <meta name="description" content="‚ö° –ë—ã—Å—Ç—Ä—ã–π VPN —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞ ROX.VPN. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞ 30 —Å–µ–∫—É–Ω–¥, –≤—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å, –ø–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!" />
  <meta name="keywords" content="VPN Telegram, ROX VPN, –±—ã—Å—Ç—Ä—ã–π VPN, –∞–Ω–æ–Ω–∏–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç, VPN –±–æ—Ç, –æ–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫, –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç" />
  <link rel="canonical" href="https://rox-net.ru/" />
  <link rel="stylesheet" href="styles.css">
  <meta property="og:title" content="ROX.VPN ‚Äî VPN —á–µ—Ä–µ–∑ Telegram –∑–∞ 30 —Å–µ–∫—É–Ω–¥" />
  <meta property="og:description" content="–ù–∏–∫–∞–∫–∏—Ö —Å–ª–æ–∂–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫! –ë—ã—Å—Ç—Ä—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π VPN –ø—Ä—è–º–æ –≤ Telegram. –ü–æ–ø—Ä–æ–±—É–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ!" />
  <meta property="og:image" content="https://rox-net.ru/og-image.jpg" />
  <meta property="og:url" content="https://rox-net.ru/" />
  <meta property="og:type" content="website" />

  <!-- Tailwind -->
  <script src="https://cdn.tailwindcss.com"></script>
  
  <!-- Font Awesome –¥–ª—è –∏–∫–æ–Ω–æ–∫ -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />

  <!-- Yandex.Metrika -->
  <script type="text/javascript">
     (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
     m[i].l=1*new Date();
     for (var j = 0; j < document.scripts.length; j++) {if (document.scripts[j].src === r) { return; }}
     k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})
     (window, document, "script", "https://mc.webvisor.org/metrika/tag_ww.js", "ym");

     ym(103220708, "init", { clickmap:true, trackLinks:true, accurateTrackBounce:true, webvisor:true, trackHash:true });
  </script>
  <noscript><div><img src="https://mc.yandex.ru/watch/103220708" style="position:absolute; left:-9999px;" alt="" /></div></noscript>
</head>

<body class="gradient-bg text-white font-sans">

  <!-- Hero Section -->
  <section class="text-center px-6 py-20 relative overflow-hidden bg-gradient-to-b from-[#1e293b]/50 to-transparent rounded-b-3xl shadow-lg">
    <div class="absolute inset-0 opacity-10">
      <div class="absolute top-10 left-10 w-20 h-20 bg-blue-500 rounded-full blur-xl"></div>
      <div class="absolute bottom-10 right-10 w-32 h-32 bg-green-500 rounded-full blur-xl"></div>
    </div>
    <div class="relative z-10">
      <div class="inline-block bg-green-500/20 text-green-400 px-4 py-2 rounded-full text-sm font-medium mb-4">üéâ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥!</div>
      <h1 class="text-4xl md:text-6xl font-bold mb-6 leading-tight">VPN –∑–∞ <span class="text-green-400">30 —Å–µ–∫—É–Ω–¥</span><br />–ø—Ä—è–º–æ –≤ Telegram</h1>
      <p class="text-lg md:text-xl text-blue-200 mb-8 max-w-2xl mx-auto">–ó–∞–±—É–¥—å –ø—Ä–æ —Å–ª–æ–∂–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏! ROX.VPN —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∏ –ø–æ–ª—É—á–∏ –±—ã—Å—Ç—Ä—ã–π –∑–∞—â–∏—â—ë–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.</p>
      <div class="flex justify-center items-center gap-4 mb-8 text-sm text-gray-300"><span>‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê</span></div>
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6 max-w-4xl mx-auto mb-10">
        <div class="bg-white/5 backdrop-blur-sm rounded-lg p-6 border border-white/10">
          <div class="text-3xl mb-3">‚ö°</div>
          <h3 class="font-semibold mb-2">–ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å</h3>
          <p class="text-sm text-gray-300">–î–æ 1 –ì–±–∏—Ç/—Å –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π</p>
        </div>
        <div class="bg-white/5 backdrop-blur-sm rounded-lg p-6 border border-white/10">
          <div class="text-3xl mb-3">üõ°Ô∏è</div>
          <h3 class="font-semibold mb-2">–ü–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å</h3>
          <p class="text-sm text-gray-300">–ù–∏–∫—Ç–æ –Ω–µ —É–∑–Ω–∞–µ—Ç, —á—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å –≤ —Å–µ—Ç–∏</p>
        </div>
        <div class="bg-white/5 backdrop-blur-sm rounded-lg p-6 border border-white/10">
          <div class="text-3xl mb-3">ü§ñ</div>
          <h3 class="font-semibold mb-2">–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤ 1 –∫–ª–∏–∫</h3>
          <p class="text-sm text-gray-300">–ù–∏–∫–∞–∫–∏—Ö —Å–ª–æ–∂–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π</p>
        </div>
      </div>
      <div class="space-y-4">
        <a href="https://t.me/RX_VPN_Seller_bot" target="_blank" onclick="ym(103220708,'reachGoal','main_cta_click')" class="inline-block bg-green-400 hover:bg-green-300 text-gray-900 px-8 py-4 rounded-full text-xl font-bold transition transform duration-300 pulse-green shadow-lg">üöÄ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ</a>
        <p class="text-green-300 text-sm">‚úÖ –ë–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ‚Ä¢ ‚úÖ –ë–µ–∑ –∫–∞—Ä—Ç—ã ‚Ä¢ ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç —Å—Ä–∞–∑—É</p>
      </div>
    </div>
  </section>

  <!-- Server Status Section -->
  <section class="bg-[#0a0f1c] px-6 py-16 rounded-xl shadow-inner">
    <div class="max-w-5xl mx-auto">
      <h2 class="text-3xl font-bold mb-8 text-center text-white">–°—Ç–∞—Ç—É—Å –Ω–∞—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤</h2>
      <div id="server-status-container" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <!-- Skeleton loaders –±—É–¥—É—Ç –∑–¥–µ—Å—å -->
      </div>
      <p id="last-updated" class="text-center text-sm text-gray-500 mt-6">–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –ó–∞–≥—Ä—É–∑–∫–∞...</p>
    </div>
  </section>

  <!-- How It Works Section -->
  <section class="bg-[#111827] px-6 py-16">
    <div class="max-w-4xl mx-auto">
      <h2 class="text-3xl font-bold mb-12 text-center">–ö–∞–∫ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è</h2>
      <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
        <div class="text-center">
          <div class="w-16 h-16 bg-green-500 rounded-full flex items-center justify-center text-2xl font-bold text-black mx-auto mb-4">1</div>
          <h3 class="text-xl font-semibold mb-3">–û—Ç–∫—Ä–æ–π –±–æ—Ç–∞</h3>
          <p class="text-gray-300">–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ ‚Äî –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –Ω–∞—à Telegram-–±–æ—Ç</p>
        </div>
        <div class="text-center">
          <div class="w-16 h-16 bg-green-500 rounded-full flex items-center justify-center text-2xl font-bold text-black mx-auto mb-4">2</div>
          <h3 class="text-xl font-semibold mb-3">–í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ</h3>
          <p class="text-gray-300">–ù–∞—á–Ω–∏ —Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞</p>
        </div>
        <div class="text-center">
          <div class="w-16 h-16 bg-green-500 rounded-full flex items-center justify-center text-2xl font-bold text-black mx-auto mb-4">3</div>
          <h3 class="text-xl font-semibold mb-3">–ü–æ–ª—å–∑—É–π—Å—è</h3>
          <p class="text-gray-300">–ü–æ–ª—É—á–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Å—è –±—ã—Å—Ç—Ä—ã–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º</p>
        </div>
      </div>
      <div class="text-center mt-12">
        <p class="text-gray-400 text-lg">‚è±Ô∏è –í–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–π–º—ë—Ç –º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã</p>
      </div>
    </div>
  </section>

  <!-- FAQ Section -->
  <section class="px-6 py-16">
    <div class="max-w-3xl mx-auto">
      <h2 class="text-3xl font-bold mb-12 text-center">–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã</h2>
      <div class="space-y-6">
        <details class="bg-white/5 rounded-lg p-6 border border-white/10">
          <summary class="font-semibold cursor-pointer text-lg">–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —ç—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ?</summary>
          <p class="mt-4 text-gray-300">–î–∞! –ú—ã –¥–∞—ë–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥, —á—Ç–æ–±—ã —Ç—ã –º–æ–≥ –æ—Ü–µ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ. –ü–æ—Ç–æ–º –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ.</p>
        </details>
        <details class="bg-white/5 rounded-lg p-6 border border-white/10">
          <summary class="font-semibold cursor-pointer text-lg">–ù–∞ –∫–∞–∫–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç?</summary>
          <p class="mt-4 text-gray-300">–ù–∞ –≤—Å–µ—Ö! iPhone, Android, Windows, Mac, Linux ‚Äî –≤–µ–∑–¥–µ. –ü–æ–ª—É—á–∏—à—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.</p>
        </details>
        <details class="bg-white/5 rounded-lg p-6 border border-white/10">
          <summary class="font-semibold cursor-pointer text-lg">–ù–∞—Å–∫–æ–ª—å–∫–æ —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ?</summary>
          <p class="mt-4 text-gray-300">–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ REALITY. –¢–≤–æ–π —Ç—Ä–∞—Ñ–∏–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—â–∏—â—ë–Ω, –ª–æ–≥–∏ –Ω–µ –≤–µ–¥—ë–º.</p>
        </details>
        <details class="bg-white/5 rounded-lg p-6 border border-white/10">
          <summary class="font-semibold cursor-pointer text-lg">–ê –µ—Å–ª–∏ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è?</summary>
          <p class="mt-4 text-gray-300">–ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å—Ç–∞–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è ‚Äî –Ω–∏–∫–∞–∫–∏—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤. –î–µ–Ω—å–≥–∏ –∑–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤–µ—Ä–Ω—ë–º.</p>
        </details>
      </div>
    </div>
  </section>

  <!-- Final CTA Section -->
  <section class="bg-gradient-to-r from-green-600 to-blue-600 px-6 py-16 text-center rounded-t-3xl shadow-inner">
    <h2 class="text-3xl font-bold mb-4">–ì–æ—Ç–æ–≤ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?</h2>
    <p class="text-xl mb-8 opacity-90">–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ —Ç—ã—Å—è—á–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ —É–¥–æ–±—Å—Ç–≤–æ ROX.VPN</p>
    <a href="https://t.me/RX_VPN_Seller_bot?start=utm_land_final_cta" target="_blank" onclick="ym(103220708,'reachGoal','final_cta_click')" class="inline-block bg-white text-gray-900 px-8 py-4 rounded-full text-xl font-bold hover:bg-gray-100 transition transform duration-300 shadow-lg">–ù–∞—á–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å ‚Üí</a>
  </section>

  <!-- Footer -->
  <footer class="text-center text-sm text-gray-500 py-8 bg-[#0a0f1c] border-t border-white/10">
    <div class="max-w-4xl mx-auto px-6">
      <p class="mb-4">ROX.VPN ‚Äî –±—ã—Å—Ç—Ä—ã–π –∏ —É–¥–æ–±–Ω—ã–π VPN —á–µ—Ä–µ–∑ Telegram</p>
      <div class="flex justify-center gap-6 text-xs">
        <a href="privacy.html" class="hover:text-white transition">–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a>
        <a href="terms.html" class="hover:text-white transition">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ</a>
      </div>
    </div>
  </footer>

  <!-- Varioqub –∏ —Å–∫—Ä–∏–ø—Ç—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ -->
  <script type="text/javascript">(function(e,x,pe,r,i,me,nt){e[i]=e[i]||function(){(e[i].a=e[i].a||[]).push(arguments)},me=x.createElement(pe),me.async=1,me.src=r,nt=x.getElementsByTagName(pe)[0],me.addEventListener('error',function(){function cb(t){t=t[t.length-1],'function'==typeof t&&t({flags:{}})};Array.isArray(e[i].a)&&e[i].a.forEach(cb);e[i]=function(){cb(arguments)}}),nt.parentNode.insertBefore(me,nt)})(window,document,'script','https://abt.s3.yandex.net/exp.js','ymab');ymab('metrika.103220708','init');</script>
  
  <!-- –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Å–∞–π—Ç–µ -->
  <script>
    let scrollDepth = 0;
    window.addEventListener('scroll', function() {
      const scrollPercent = Math.round(window.scrollY / (document.body.scrollHeight - window.innerHeight) * 100);
      if (scrollPercent > scrollDepth) {
        scrollDepth = scrollPercent;
        if (scrollDepth >= 25 && scrollDepth < 50) {
          ym(103220708, 'reachGoal', 'scroll_25');
        } else if (scrollDepth >= 50 && scrollDepth < 75) {
          ym(103220708, 'reachGoal', 'scroll_50');
        } else if (scrollDepth >= 75) {
          ym(103220708, 'reachGoal', 'scroll_75');
        }
      }
    });

    let timeOnSite = 0;
    setInterval(function() {
      timeOnSite += 10;
      if (timeOnSite === 30) {
        ym(103220708, 'reachGoal', 'time_30s');
      } else if (timeOnSite === 60) {
        ym(103220708, 'reachGoal', 'time_60s');
      } else if (timeOnSite === 120) {
        ym(103220708, 'reachGoal', 'time_2min');
      }
    }, 10000);

    // Smooth scroll –¥–ª—è —è–∫–æ—Ä–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
          target.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
        }
      });
    });
  </script>

  <!-- Tailwind config -->
  <script>
    tailwind.config = {
      content: ['./**/*.html'],
      theme: {
        extend: {},
      },
    }
  </script>

  <!-- Server Status Manager -->
  <script>
// ServerStatusManager - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
class ServerStatusManager {
    constructor(config = {}) {
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        this.config = {
            apiUrl: config.apiUrl || 'https://api.rox-net.ru/api/server-statuses',
            updateInterval: config.updateInterval || 60000,
            retryAttempts: config.retryAttempts || 3,
            retryDelay: config.retryDelay || 2000,
            requestTimeout: config.requestTimeout || 15000,
            cacheTimeout: config.cacheTimeout || 60000,
            enableAnalytics: config.enableAnalytics !== false,
            enableOfflineSupport: config.enableOfflineSupport !== false,
            ...config
        };

        // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
        this.elements = {
            container: document.getElementById('server-status-container'),
            lastUpdated: document.getElementById('last-updated'),
            errorContainer: null
        };

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ
        this.state = {
            servers: [],
            isLoading: false,
            lastFetchTime: 0,
            updateTimer: null,
            retryCount: 0,
            cache: new Map(),
            observers: new Set()
        };

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        this.loadingIndicator = new LoadingIndicator();
        this.errorHandler = new ErrorHandler(this);
        this.analytics = new AnalyticsTracker(this.config.enableAnalytics);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        this.validateElements();
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    validateElements() {
        if (!this.elements.container) {
            throw new Error('Server status container element not found');
        }
        if (!this.elements.lastUpdated) {
            console.warn('Last updated element not found');
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    async init() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage –µ—Å–ª–∏ –µ—Å—Ç—å
            this.loadCachedData();
            
            // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
            await this.updateStatuses();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            this.startAutoUpdate();
            
            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            this.registerEventHandlers();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º offline –ø–æ–¥–¥–µ—Ä–∂–∫—É
            if (this.config.enableOfflineSupport) {
                this.initOfflineSupport();
            }
            
            this.analytics.track('manager_initialized');
        } catch (error) {
            console.error('Failed to initialize ServerStatusManager:', error);
            this.showErrorState(error.message);
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    loadCachedData() {
        try {
            const cached = localStorage.getItem('server_statuses_cache');
            if (cached) {
                const { data, timestamp } = JSON.parse(cached);
                if (Date.now() - timestamp < this.config.cacheTimeout) {
                    this.state.servers = data;
                    this.renderServers();
                    this.updateLastUpdatedTime(new Date(timestamp));
                }
            }
        } catch (error) {
            console.warn('Failed to load cached data:', error);
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à
    saveCacheData(data) {
        try {
            localStorage.setItem('server_statuses_cache', JSON.stringify({
                data,
                timestamp: Date.now()
            }));
        } catch (error) {
            console.warn('Failed to save cache data:', error);
        }
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
    async updateStatuses(showLoader = true) {
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        if (this.state.isLoading) {
            console.log('Update already in progress, skipping...');
            return;
        }

        this.state.isLoading = true;
        this.state.retryCount = 0;

        try {
            if (showLoader) {
                this.showSkeletonLoader();
                this.loadingIndicator.show('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ —Å–µ—Ä–≤–µ—Ä–æ–≤...');
            }

            const statuses = await this.fetchWithRetry(this.config.apiUrl);
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if (!Array.isArray(statuses)) {
                throw new Error('Invalid response format: expected array');
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.state.servers = statuses;
            this.state.lastFetchTime = Date.now();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            this.saveCacheData(statuses);
            
            // –†–µ–Ω–¥–µ—Ä–∏–º
            this.renderServers();
            this.updateLastUpdatedTime();
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
            this.notifyObservers('update', statuses);
            
            // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
            this.analytics.track('server_status_loaded', {
                serverCount: statuses.length,
                onlineCount: statuses.filter(s => s.status === 'online').length
            });

        } catch (error) {
            console.error('Failed to update statuses:', error);
            this.handleUpdateError(error);
        } finally {
            this.state.isLoading = false;
            this.loadingIndicator.hide();
        }
    }

    // Fetch —Å retry –ª–æ–≥–∏–∫–æ–π
    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ fetchWithRetry
async fetchWithRetry(url, options = {}, attempts = this.config.retryAttempts) {
    const errors = [];

    for (let i = 0; i < attempts; i++) {
        try {
            console.log(`Attempt ${i + 1}/${attempts} to fetch from ${url}`);
            
            const controller = new AbortController();
            const timeoutId = setTimeout(() => {
                controller.abort();
                console.warn('Request timeout');
            }, this.config.requestTimeout);
            
            const response = await fetch(url, {
                method: 'GET',
                mode: 'cors',
                credentials: 'omit',
                signal: controller.signal,
                headers: {
                    'Accept': 'application/json'
                    // –£–±—Ä–∞–ª–∏ 'Cache-Control': 'no-cache' - —ç—Ç–æ –≤—ã–∑—ã–≤–∞–ª–æ CORS –æ—à–∏–±–∫—É
                }
            });
            
            clearTimeout(timeoutId);
            
            console.log('Response status:', response.status);
            
            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`HTTP ${response.status}: ${response.statusText}. Response: ${errorText}`);
            }
            
            const data = await response.json();
            console.log('Received data:', data);
            
            return data;
            
        } catch (error) {
            let errorMessage = error.message;
            
            if (error.name === 'AbortError') {
                errorMessage = 'Request timeout';
            } else if (error.name === 'TypeError' && error.message.includes('Failed to fetch')) {
                errorMessage = 'Network error or CORS issue';
            }
            
            errors.push({
                attempt: i + 1,
                error: errorMessage,
                timestamp: new Date().toISOString()
            });
            
            this.state.retryCount = i + 1;
            
            console.error(`Attempt ${i + 1}/${attempts} failed:`, errorMessage);
            
            if (i < attempts - 1) {
                const delay = this.config.retryDelay * Math.pow(2, i);
                this.loadingIndicator.show(`–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ${delay / 1000}—Å...`);
                await this.sleep(delay);
            }
        }
    }

    const aggregatedError = new Error(`Failed after ${attempts} attempts`);
    aggregatedError.attempts = attempts;
    aggregatedError.errors = errors;
    throw aggregatedError;
}

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–æ–≤
    renderServers() {
        if (!this.state.servers.length) {
            this.showEmptyState();
            return;
        }

        const html = this.state.servers
            .map(server => this.renderServerCard(server))
            .join('');
            
        this.elements.container.innerHTML = html;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è
        this.animateCards();
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
    renderServerCard(server) {
        const isOnline = server.status === 'online';
        const statusColor = isOnline ? 'green' : 'red';
        const statusText = isOnline ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ—Ñ–ª–∞–π–Ω';
        const memUsagePercent = this.calculateMemoryUsage(server);
        const cpuStatus = this.getCPUStatus(server.cpu_load);
        const memStatus = this.getMemoryStatus(memUsagePercent);

        return `
            <div class="server-card bg-gray-800/50 rounded-xl p-6 border border-gray-700 
                        ${isOnline ? 'hover:border-green-500/50' : 'border-red-500/50'} 
                        transition-all duration-300 opacity-0 translate-y-4"
                 data-server="${server.name}">
                
                <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ -->
                <div class="flex items-center justify-between mb-4">
                    <h3 class="text-2xl font-bold text-white flex items-center">
                        ${this.getServerIcon(server.name)}
                        <span class="ml-2">${this.escapeHtml(server.name)}</span>
                    </h3>
                    <div class="flex items-center space-x-2 px-3 py-1 rounded-full 
                                bg-${statusColor}-500/10 text-${statusColor}-400 text-sm font-semibold">
                        <span class="relative flex h-2.5 w-2.5">
                            ${isOnline ? `
                                <span class="animate-ping absolute inline-flex h-full w-full rounded-full bg-${statusColor}-400 opacity-75"></span>
                                <span class="relative inline-flex rounded-full h-2.5 w-2.5 bg-${statusColor}-400"></span>
                            ` : `
                                <span class="inline-flex rounded-full h-2.5 w-2.5 bg-${statusColor}-400"></span>
                            `}
                        </span>
                        <span>${statusText}</span>
                    </div>
                </div>
                
                <!-- –ú–µ—Ç—Ä–∏–∫–∏ -->
                ${isOnline ? this.renderServerMetrics(server, memUsagePercent, cpuStatus, memStatus) : this.renderOfflineState()}
                
                <!-- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è -->
                ${isOnline ? this.renderServerActions(server) : ''}
            </div>
        `;
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –º–µ—Ç—Ä–∏–∫ —Å–µ—Ä–≤–µ—Ä–∞
    renderServerMetrics(server, memUsagePercent, cpuStatus, memStatus) {
		const pingColor = this.getPingColor(server.ping_ms);
        return `
            <div class="space-y-3 text-gray-300 text-sm">
                <!-- CPU -->
                <div class="metric-row">
				
					<div class="flex items-center justify-between py-2">
                    <span class="text-gray-400 flex items-center">
                        <i class="fa-solid fa-signal fa-fw mr-2"></i>–ü–∏–Ω–≥
                    </span>
                    <span class="font-mono font-semibold ${pingColor}">
                        ${server.ping_ms !== -1 ? `${server.ping_ms} ms` : 'N/A'}
                    </span>
                </div>
				
                    <div class="flex items-center justify-between mb-1">
                        <span class="text-gray-400 flex items-center">
                            <i class="fa-solid fa-microchip fa-fw mr-2"></i>CPU
                        </span>
                        <span class="font-mono font-semibold ${cpuStatus.textColor}">${server.cpu_load}%</span>
                    </div>
                    <div class="w-full bg-gray-700 rounded-full h-2.5 overflow-hidden">
                        <div class="h-full ${cpuStatus.bgColor} progress-bar transition-all duration-500 ease-out" 
                             style="width: ${Math.min(server.cpu_load, 100)}%">
                            <div class="h-full bg-white/20 animate-pulse"></div>
                        </div>
                    </div>
                </div>
                
                <!-- RAM -->
                <div class="metric-row">
                    <div class="flex items-center justify-between mb-1">
                        <span class="text-gray-400 flex items-center">
                            <i class="fa-solid fa-memory fa-fw mr-2"></i>RAM
                        </span>
                        <span class="font-mono font-semibold ${memStatus.textColor}">
                            ${this.formatBytes(server.mem_used)} / ${this.formatBytes(server.mem_total)}
                        </span>
                    </div>
                    <div class="w-full bg-gray-700 rounded-full h-2.5 overflow-hidden">
                        <div class="h-full ${memStatus.bgColor} progress-bar transition-all duration-500 ease-out" 
                             style="width: ${memUsagePercent}%">
                            <div class="h-full bg-white/20 animate-pulse"></div>
                        </div>
                    </div>
                </div>

                <!-- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ -->
                <div class="flex items-center justify-between py-2">
                    <span class="text-gray-400 flex items-center">
                        <i class="fa-solid fa-users fa-fw mr-2"></i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                    </span>
                    <div class="flex items-center space-x-2">
                        <span class="font-mono font-semibold">${server.users_online}</span>
                        ${server.users_online > 0 ? '<span class="w-2 h-2 bg-green-400 rounded-full animate-pulse"></span>' : ''}
                    </div>
                </div>

                <!-- –¢—Ä–∞—Ñ–∏–∫ -->
                <div class="flex items-center justify-between py-2">
                    <span class="text-gray-400 flex items-center">
                        <i class="fa-solid fa-arrow-down-up-across-line fa-fw mr-2"></i>–¢—Ä–∞—Ñ–∏–∫
                    </span>
                    <span class="font-mono font-semibold">${this.formatBytes(server.traffic_used)}</span>
                </div>

                <!-- –ê–ø—Ç–∞–π–º -->
                <div class="flex items-center justify-between pt-3 mt-3 border-t border-gray-700/50">
                    <span class="text-gray-400 flex items-center">
                        <i class="fa-solid fa-clock fa-fw mr-2"></i>–ê–ø—Ç–∞–π–º
                    </span>
                    <span class="font-mono font-semibold text-green-400">${server.uptime}</span>
                </div>
            </div>
        `;
    }
	
	getPingColor(pingTime) {
        if (pingTime === -1) return 'text-red-400'; // –û—Ñ–ª–∞–π–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞
        if (pingTime < 50) return 'text-green-400'; // –•–æ—Ä–æ—à–∏–π –ø–∏–Ω–≥
        if (pingTime < 150) return 'text-yellow-400'; // –°—Ä–µ–¥–Ω–∏–π –ø–∏–Ω–≥
        return 'text-red-400'; // –í—ã—Å–æ–∫–∏–π –ø–∏–Ω–≥
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ñ—Ñ–ª–∞–π–Ω
    renderOfflineState() {
        return `
            <div class="text-center py-8 text-gray-500">
                <i class="fa-solid fa-exclamation-triangle text-4xl mb-3 text-red-400 animate-pulse"></i>
                <p class="font-semibold">–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</p>
                <p class="text-xs mt-2 text-gray-600">–í–µ–¥—É—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã</p>
            </div>
        `;
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
    renderServerActions(server) {
        return `
            <div class="flex justify-end mt-4 pt-4 border-t border-gray-700/50">
                <button onclick="serverStatusManager.showServerDetails('${server.name}')" 
                        class="text-xs text-gray-400 hover:text-white transition-colors">
                    <i class="fa-solid fa-info-circle mr-1"></i>–ü–æ–¥—Ä–æ–±–Ω–µ–µ
                </button>
            </div>
        `;
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞
    showServerDetails(serverName) {
        const server = this.state.servers.find(s => s.name === serverName);
        if (!server) return;

        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏
        console.log('Server details:', server);
        this.analytics.track('server_details_viewed', { serverName });
    }

    // Skeleton loader
    showSkeletonLoader() {
        const skeletonCount = this.state.servers.length || 3;
        const skeletons = Array(skeletonCount).fill(null).map(() => `
            <div class="bg-gray-800/50 rounded-xl p-6 border border-gray-700 animate-pulse">
                <div class="flex items-center justify-between mb-4">
                    <div class="h-7 bg-gray-700 rounded w-1/3"></div>
                    <div class="h-7 bg-gray-700 rounded w-1/4"></div>
                </div>
                <div class="space-y-3 mt-5">
                    ${Array(5).fill('<div class="h-4 bg-gray-700 rounded"></div>').join('')}
                </div>
            </div>
        `).join('');
        
        this.elements.container.innerHTML = skeletons;
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    showEmptyState() {
        this.elements.container.innerHTML = `
            <div class="col-span-full text-center py-12 text-gray-500">
                <i class="fa-solid fa-server text-5xl mb-4 opacity-50"></i>
                <p class="text-lg">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤</p>
                <button onclick="serverStatusManager.updateStatuses()" 
                        class="mt-4 bg-gray-700 hover:bg-gray-600 px-4 py-2 rounded-lg transition-colors">
                    <i class="fa-solid fa-refresh mr-2"></i>–û–±–Ω–æ–≤–∏—Ç—å
                </button>
            </div>
        `;
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏
    showErrorState(errorMessage) {
        this.elements.container.innerHTML = `
            <div class="bg-red-500/20 text-red-400 p-6 rounded-xl col-span-full border border-red-600">
                <div class="flex items-center mb-3">
                    <i class="fa-solid fa-exclamation-triangle mr-3 text-xl"></i>
                    <h3 class="font-bold text-lg">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
                </div>
                <p class="mb-4">${this.escapeHtml(errorMessage)}</p>
                <div class="flex space-x-3">
                    <button onclick="serverStatusManager.updateStatuses()" 
                            class="bg-red-600 hover:bg-red-500 px-4 py-2 rounded-lg transition-colors">
                        <i class="fa-solid fa-refresh mr-2"></i>–ü–æ–≤—Ç–æ—Ä–∏—Ç—å
                    </button>
                    <button onclick="serverStatusManager.loadCachedData()" 
                            class="bg-gray-700 hover:bg-gray-600 px-4 py-2 rounded-lg transition-colors">
                        <i class="fa-solid fa-database mr-2"></i>–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞
                    </button>
                </div>
            </div>
        `;
        this.updateLastUpdatedTime(null, '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    handleUpdateError(error) {
        // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (this.state.servers.length > 0) {
            console.log('Using cached data due to error');
            this.renderServers();
            this.updateLastUpdatedTime(null, '–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        } else {
            this.showErrorState(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã —Å–µ—Ä–≤–µ—Ä–æ–≤');
        }
        
        this.analytics.track('server_status_error', {
            error: error.message,
            attempts: error.attempts || 1
        });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    updateLastUpdatedTime(date = new Date(), prefix = '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ') {
        if (!this.elements.lastUpdated) return;
        
        const timeString = date ? date.toLocaleTimeString('ru-RU') : '';
        this.elements.lastUpdated.textContent = `${prefix}: ${timeString}`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–≤–µ–∂–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        const age = Date.now() - this.state.lastFetchTime;
        if (age > this.config.cacheTimeout * 2) {
            this.elements.lastUpdated.classList.add('text-yellow-500');
        } else {
            this.elements.lastUpdated.classList.remove('text-yellow-500');
        }
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    startAutoUpdate() {
        this.stopAutoUpdate(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
        
        this.state.updateTimer = setInterval(() => {
            this.updateStatuses(false); // –ë–µ–∑ –ø–æ–∫–∞–∑–∞ loader'–∞
        }, this.config.updateInterval);
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    stopAutoUpdate() {
        if (this.state.updateTimer) {
            clearInterval(this.state.updateTimer);
            this.state.updateTimer = null;
        }
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    registerEventHandlers() {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É
        document.addEventListener('visibilitychange', () => {
            if (!document.hidden && Date.now() - this.state.lastFetchTime > this.config.updateInterval) {
                this.updateStatuses(false);
            }
        });

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        window.addEventListener('online', () => {
            console.log('Connection restored, updating statuses...');
            this.updateStatuses();
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–µ—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        window.addEventListener('offline', () => {
            console.log('Connection lost');
            this.loadingIndicator.show('–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º', 'warning');
        });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è offline –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    initOfflineSupport() {
        if ('serviceWorker' in navigator && 'caches' in window) {
            // –ö—ç—à–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã API
            this.setupServiceWorkerCache();
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Service Worker –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    async setupServiceWorkerCache() {
        try {
            const cache = await caches.open('api-cache-v1');
            // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∫—ç—à–∏—Ä—É–µ–º endpoint
            await cache.add(this.config.apiUrl);
        } catch (error) {
            console.warn('Failed to setup service worker cache:', error);
        }
    }

    // –ê–Ω–∏–º–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
    animateCards() {
        const cards = this.elements.container.querySelectorAll('.server-card');
        cards.forEach((card, index) => {
            setTimeout(() => {
                card.classList.remove('opacity-0', 'translate-y-4');
                card.classList.add('opacity-100', 'translate-y-0');
            }, index * 100);
        });
    }

    // –£—Ç–∏–ª–∏—Ç—ã
    calculateMemoryUsage(server) {
        if (!server.mem_total || server.mem_total === 0) return 0;
        return Math.round((server.mem_used / server.mem_total) * 100);
    }

    getCPUStatus(cpuLoad) {
        if (cpuLoad > 80) return { bgColor: 'bg-red-500', textColor: 'text-red-400' };
        if (cpuLoad > 60) return { bgColor: 'bg-yellow-500', textColor: 'text-yellow-400' };
        return { bgColor: 'bg-green-500', textColor: 'text-green-400' };
    }

    getMemoryStatus(memUsagePercent) {
        if (memUsagePercent > 80) return { bgColor: 'bg-red-500', textColor: 'text-red-400' };
        if (memUsagePercent > 60) return { bgColor: 'bg-yellow-500', textColor: 'text-yellow-400' };
        return { bgColor: 'bg-blue-500', textColor: 'text-blue-400' };
    }

    getServerIcon(serverName) {
        const icons = {
            'Germany': 'üá©üá™',
            'USA': 'üá∫üá∏',
            'Finland': 'üá´üáÆ',
            'Russia': 'üá∑üá∫',
            'Netherlands': 'üá≥üá±'
        };
        return icons[serverName] || 'üåê';
    }

    formatBytes(bytes, decimals = 1) {
        if (!+bytes) return '0 B';
        const k = 1024;
        const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return `${parseFloat((bytes / Math.pow(k, i)).toFixed(decimals))} ${sizes[i]}`;
    }

    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // Observer pattern –¥–ª—è —Ä–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç–∏
    subscribe(callback) {
        this.state.observers.add(callback);
        return () => this.state.observers.delete(callback);
    }

    notifyObservers(event, data) {
        this.state.observers.forEach(callback => {
            try {
                callback(event, data);
            } catch (error) {
                console.error('Observer callback error:', error);
            }
        });
    }

    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    refresh() {
        return this.updateStatuses();
    }

    destroy() {
        this.stopAutoUpdate();
        this.state.observers.clear();
        this.loadingIndicator.destroy();
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
class LoadingIndicator {
    constructor() {
        this.element = this.createElement();
        this.timeout = null;
    }

    createElement() {
        const div = document.createElement('div');
        div.className = 'fixed top-4 right-4 bg-blue-600 text-white px-4 py-3 rounded-lg shadow-lg transform translate-x-full transition-all duration-300 z-50 flex items-center';
        div.innerHTML = `
            <i class="fa fa-spinner fa-spin mr-3"></i>
            <span class="loading-text">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
        `;
        document.body.appendChild(div);
        return div;
    }

    show(text = '–ó–∞–≥—Ä—É–∑–∫–∞...', type = 'info') {
        clearTimeout(this.timeout);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        const bgColors = {
            info: 'bg-blue-600',
            success: 'bg-green-600',
            warning: 'bg-yellow-600',
            error: 'bg-red-600'
        };
        
        this.element.className = `fixed top-4 right-4 ${bgColors[type]} text-white px-4 py-3 rounded-lg shadow-lg transform transition-all duration-300 z-50 flex items-center`;
        this.element.querySelector('.loading-text').textContent = text;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        requestAnimationFrame(() => {
            this.element.classList.remove('translate-x-full');
        });
    }

    hide(delay = 300) {
        this.timeout = setTimeout(() => {
            this.element.classList.add('translate-x-full');
        }, delay);
    }

    destroy() {
        clearTimeout(this.timeout);
        this.element.remove();
    }
}

// –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
class ErrorHandler {
    constructor(manager) {
        this.manager = manager;
        this.errorLog = [];
    }

    log(error, context = {}) {
        const errorEntry = {
            timestamp: new Date().toISOString(),
            message: error.message,
            stack: error.stack,
            context
        };
        
        this.errorLog.push(errorEntry);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞
        if (this.errorLog.length > 50) {
            this.errorLog.shift();
        }
        
        console.error('ServerStatusManager Error:', errorEntry);
    }

    getRecentErrors(count = 10) {
        return this.errorLog.slice(-count);
    }
}

// –ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
class AnalyticsTracker {
    constructor(enabled = true) {
        this.enabled = enabled;
    }

    track(event, data = {}) {
        if (!this.enabled) return;
        
        try {
            // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫—É
            if (typeof ym !== 'undefined') {
                ym(103220708, 'reachGoal', event, data);
            }
            
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            console.log('Analytics event:', event, data);
        } catch (error) {
            console.warn('Analytics tracking error:', error);
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    window.serverStatusManager = new ServerStatusManager({
        apiUrl: 'https://rx-testru/api/server-statuses',
        updateInterval: 60000,
        enableAnalytics: true,
        enableOfflineSupport: true
    });
    
    window.serverStatusManager.init();
});
  </script>
</body>
</html>