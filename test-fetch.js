#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã fetch API
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –ø–æ–ª–∏—Ñ–∏–ª–ª–∞ –¥–ª—è Node.js < 18
 */

// –ò–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ server.js
const nodeVersion = process.version;
const majorVersion = parseInt(nodeVersion.slice(1).split(".")[0], 10);

console.log(`üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fetch API –¥–ª—è Node.js ${nodeVersion}`);

if (majorVersion < 18) {
  console.log("üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–∏—Ñ–∏–ª–ª node-fetch...");
  const fetch = require("node-fetch");
  global.fetch = fetch;
} else {
  console.log("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–π fetch API");
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º fetch
async function testFetch() {
  try {
    console.log("üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º fetch API...");

    const response = await fetch("https://httpbin.org/get");
    const data = await response.json();

    console.log("‚úÖ Fetch API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!");
    console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
    console.log(`üîó URL: ${data.url}`);

    return true;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ fetch:", error.message);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testFetch().then((success) => {
  if (success) {
    console.log("\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
    process.exit(0);
  } else {
    console.log("\nüí• –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π!");
    process.exit(1);
  }
});
