From 98bb1c6b0b1a7db19697c97fb24eac6e06998238 Mon Sep 17 00:00:00 2001
From: codex <codex@openai.com>
Date: Sun, 20 Jul 2025 15:50:41 +0000
Subject: [PATCH] feat: telegram auth integrated into frontend/backend
 structure

---
 backend/server.js                             | 62 +++++++++++++++++++
 backend/src/api/auth/logout.ts                |  4 ++
 .../components/auth/TelegramLoginWidget.tsx   | 36 +++++++++++
 frontend/src/middleware/auth.ts               | 18 ++++++
 .../src/pages/admin/learning-insights.tsx     | 44 +++++++++++++
 frontend/src/pages/login.tsx                  |  4 ++
 6 files changed, 168 insertions(+)
 create mode 100644 backend/server.js
 create mode 100644 backend/src/api/auth/logout.ts
 create mode 100644 frontend/src/components/auth/TelegramLoginWidget.tsx
 create mode 100644 frontend/src/middleware/auth.ts
 create mode 100644 frontend/src/pages/admin/learning-insights.tsx
 create mode 100644 frontend/src/pages/login.tsx

diff --git a/backend/server.js b/backend/server.js
new file mode 100644
index 0000000..2e6ccdd
--- /dev/null
+++ b/backend/server.js
@@ -0,0 +1,62 @@
+
+const express = require('express');
+const crypto = require('crypto');
+const bodyParser = require('body-parser');
+
+const app = express();
+app.use(bodyParser.json());
+
+app.post('/api/auth/telegram', (req, res) => {
+  const { hash, ...data } = req.body;
+  const secret = crypto
+    .createHash('sha256')
+    .update(process.env.TELEGRAM_BOT_TOKEN || '')
+    .digest();
+  const checkString = Object.entries(data)
+    .sort(([a], [b]) => a.localeCompare(b))
+    .map(([k, v]) => `${k}=${v}`)
+    .join('\n');
+  const computedHash = crypto
+    .createHmac('sha256', secret)
+    .update(checkString)
+    .digest('hex');
+  if (computedHash !== hash) {
+    return res.status(403).json({ error: 'Invalid signature' });
+  }
+  const sessionToken = crypto.randomUUID();
+  const oneDay = 60 * 60 * 24;
+  res.setHeader('Set-Cookie', `auth_token=${sessionToken}; Path=/; Max-Age=${oneDay}; HttpOnly; SameSite=Strict`);
+  return res.status(200).json({ ok: true });
+});
+
+// –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Å–µ—Ä–≤–µ—Ä–∞
+import crypto from "crypto";
+
+export default async function handler(req, res) {
+  if (req.method !== "POST") return res.status(405).end();
+
+  const { hash, ...data } = req.body;
+  const secret = crypto
+    .createHash("sha256")
+    .update(process.env.TELEGRAM_BOT_TOKEN || "")
+    .digest();
+
+  const checkString = Object.entries(data)
+    .sort(([a], [b]) => a.localeCompare(b))
+    .map(([k, v]) => `${k}=${v}`)
+    .join("\n");
+
+  const computedHash = crypto
+    .createHmac("sha256", secret)
+    .update(checkString)
+    .digest("hex");
+
+  if (computedHash !== hash) {
+    return res.status(403).json({ error: "Invalid signature" });
+  }
+
+  const sessionToken = crypto.randomUUID();
+  const oneDay = 60 * 60 * 24;
+  res.setHeader("Set-Cookie", `auth_token=${sessionToken}; Path=/; Max-Age=${oneDay}; HttpOnly; SameSite=Strict`);
+  return res.status(200).json({ ok: true });
+}
\ No newline at end of file
diff --git a/backend/src/api/auth/logout.ts b/backend/src/api/auth/logout.ts
new file mode 100644
index 0000000..3993bfe
--- /dev/null
+++ b/backend/src/api/auth/logout.ts
@@ -0,0 +1,4 @@
+export default function handler(req, res) {
+  res.setHeader("Set-Cookie", "auth_token=deleted; Path=/; Max-Age=0");
+  res.status(200).json({ ok: true });
+}
\ No newline at end of file
diff --git a/frontend/src/components/auth/TelegramLoginWidget.tsx b/frontend/src/components/auth/TelegramLoginWidget.tsx
new file mode 100644
index 0000000..70eb34a
--- /dev/null
+++ b/frontend/src/components/auth/TelegramLoginWidget.tsx
@@ -0,0 +1,36 @@
+import Script from "next/script";
+
+export default function TelegramLogin() {
+  return (
+    <div className="flex items-center justify-center min-h-screen">
+      <div className="text-center">
+        <h1 className="text-2xl font-semibold mb-4">üîê –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram</h1>
+        <Script
+          async
+          src="https://telegram.org/js/telegram-widget.js?7"
+          strategy="afterInteractive"
+          data-telegram-login="your_bot_username"
+          data-size="large"
+          data-userpic="false"
+          data-request-access="write"
+          data-onauth="onTelegramAuth"
+        />
+        <Script id="telegram-auth-handler" strategy="afterInteractive">
+          {`
+            function onTelegramAuth(user) {
+              fetch("/api/auth/telegram", {
+                method: "POST",
+                headers: { "Content-Type": "application/json" },
+                body: JSON.stringify(user),
+              })
+              .then((res) => {
+                if (res.ok) window.location.href = "/admin/learning-insights";
+                else alert("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram");
+              });
+            }
+          `}
+        </Script>
+      </div>
+    </div>
+  );
+}
\ No newline at end of file
diff --git a/frontend/src/middleware/auth.ts b/frontend/src/middleware/auth.ts
new file mode 100644
index 0000000..c73aff6
--- /dev/null
+++ b/frontend/src/middleware/auth.ts
@@ -0,0 +1,18 @@
+import { NextResponse } from "next/server";
+import type { NextRequest } from "next/server";
+
+export function middleware(req: NextRequest) {
+  const url = req.nextUrl.clone();
+  const token = req.cookies.get("auth_token")?.value;
+
+  if (!token && url.pathname.startsWith("/admin/learning-insights")) {
+    url.pathname = "/login";
+    return NextResponse.redirect(url);
+  }
+
+  return NextResponse.next();
+}
+
+export const config = {
+  matcher: ["/admin/learning-insights"],
+};
\ No newline at end of file
diff --git a/frontend/src/pages/admin/learning-insights.tsx b/frontend/src/pages/admin/learning-insights.tsx
new file mode 100644
index 0000000..0da68a9
--- /dev/null
+++ b/frontend/src/pages/admin/learning-insights.tsx
@@ -0,0 +1,44 @@
+import { useEffect, useState } from "react";
+import { useRouter } from "next/router";
+import { Button } from "@/components/ui/button";
+
+export default function LearningInsightsDashboard() {
+  const [logs, setLogs] = useState([]);
+  const router = useRouter();
+
+  useEffect(() => {
+    const token = document.cookie.includes("auth_token");
+    if (!token) router.replace("/login");
+  }, [router]);
+
+  useEffect(() => {
+    const ws = new WebSocket("wss://your-server/ws/insights");
+    ws.onmessage = (event) => {
+      const data = JSON.parse(event.data);
+      setLogs((prev) => [data, ...prev.slice(0, 100)]);
+    };
+    return () => ws.close();
+  }, []);
+
+  return (
+    <main className="p-6">
+      <div className="flex justify-between items-center mb-4">
+        <h1 className="text-xl font-bold">üìä –û–±—É—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤</h1>
+        <Button
+          variant="outline"
+          size="sm"
+          onClick={() => {
+            fetch("/api/auth/logout").then(() => router.push("/login"));
+          }}
+        >
+          –í—ã–π—Ç–∏
+        </Button>
+      </div>
+      <ul className="space-y-1 text-sm font-mono text-muted-foreground">
+        {logs.map((log, i) => (
+          <li key={i}>{JSON.stringify(log)}</li>
+        ))}
+      </ul>
+    </main>
+  );
+}
\ No newline at end of file
diff --git a/frontend/src/pages/login.tsx b/frontend/src/pages/login.tsx
new file mode 100644
index 0000000..ee63b46
--- /dev/null
+++ b/frontend/src/pages/login.tsx
@@ -0,0 +1,4 @@
+import TelegramLogin from "@/components/auth/TelegramLoginWidget";
+export default function Login() {
+  return <TelegramLogin />;
+}
\ No newline at end of file
-- 
2.39.2

