From f0868f507ad589c80c7d9d2ec42bed10841f2bca Mon Sep 17 00:00:00 2001
From: codex <codex@openai.com>
Date: Sun, 20 Jul 2025 16:32:09 +0000
Subject: [PATCH] feat: add WebSocket server to stream logs from /logs/*.log

---
 backend/server.js | 66 +++++++++++++++++++++--------------------------
 1 file changed, 29 insertions(+), 37 deletions(-)

diff --git a/backend/server.js b/backend/server.js
index 2567616..fdf021f 100644
--- a/backend/server.js
+++ b/backend/server.js
@@ -1,48 +1,40 @@
-const express = require("express");
-const crypto = require("crypto");
-const fs = require("fs");
-const path = require("path");
-const bodyParser = require("body-parser");
-const http = require("http");
-const WebSocket = require("ws");
+const express = require('express');
+const http = require('http');
+const { WebSocketServer } = require('ws');
+const fs = require('fs');
+const path = require('path');
 
 const app = express();
 const server = http.createServer(app);
-const wss = new WebSocket.Server({ server, path: "/ws/insights" });
+const wss = new WebSocketServer({ server, path: '/ws/insights' });
 
-app.use(bodyParser.json());
+const logFiles = [
+  'logs/backend-combined.log',
+  'logs/backend-error.log',
+  'logs/frontend-combined.log',
+  'logs/frontend-error.log'
+];
+
+wss.on('connection', (ws) => {
+  ws.send(JSON.stringify({ message: 'WebSocket подключен ✅' }));
 
-wss.on("connection", (ws) => {
-  console.log("WS client connected");
   const interval = setInterval(() => {
-    const logPath = path.join(__dirname, "../logs/latest.log");
-    if (fs.existsSync(logPath)) {
-      const content = fs.readFileSync(logPath, "utf-8").trim();
-      const lastLines = content.split("\n").slice(-10);
-      ws.send(JSON.stringify({ logs: lastLines }));
-    } else {
-      ws.send(JSON.stringify({ logs: ["log file not found"] }));
-    }
-  }, 2000);
+    const logs = logFiles.flatMap((file) => {
+      try {
+        const fullPath = path.join(__dirname, '..', file);
+        const content = fs.readFileSync(fullPath, 'utf-8').trim().split('\n');
+        return content.slice(-5); // последние 5 строк
+      } catch (err) {
+        return [`[log-missing] ${file}`];
+      }
+    });
 
-  ws.on("close", () => clearInterval(interval));
-});
+    ws.send(JSON.stringify({ timestamp: new Date(), logs }));
+  }, 3000);
 
-// Существующий endpoint авторизации Telegram
-app.post('/api/auth/telegram', (req, res) => {
-  const { hash, ...data } = req.body;
-  const secret = crypto.createHash('sha256').update(process.env.TELEGRAM_BOT_TOKEN || '').digest();
-  const checkString = Object.entries(data).sort(([a], [b]) => a.localeCompare(b)).map(([k, v]) => `${k}=${v}`).join('\n');
-  const computedHash = crypto.createHmac('sha256', secret).update(checkString).digest('hex');
-  if (computedHash !== hash) return res.status(403).json({ error: 'Invalid signature' });
-  const sessionToken = crypto.randomUUID();
-  const oneDay = 60 * 60 * 24;
-  res.setHeader('Set-Cookie', `auth_token=${sessionToken}; Path=/; Max-Age=${oneDay}; HttpOnly; SameSite=Strict`);
-  return res.status(200).json({ ok: true });
+  ws.on('close', () => clearInterval(interval));
 });
 
-// Сервер запускается
-const PORT = process.env.PORT || 3000;
-server.listen(PORT, () => {
-  console.log("Server running on port", PORT);
+server.listen(3000, () => {
+  console.log('🚀 Server running on http://localhost:3000');
 });
\ No newline at end of file
-- 
2.39.2

