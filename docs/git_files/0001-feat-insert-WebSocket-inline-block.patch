From 238ada2e2654a00df12f5042a15e78f43ea4256c Mon Sep 17 00:00:00 2001
From: codex <codex@openai.com>
Date: Sun, 20 Jul 2025 18:18:19 +0000
Subject: [PATCH] feat: insert WebSocket inline block

---
 backend/server.js | 74 ++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 73 insertions(+), 1 deletion(-)

diff --git a/backend/server.js b/backend/server.js
index 89d2dc5..01b1b0c 100644
--- a/backend/server.js
+++ b/backend/server.js
@@ -5,4 +5,76 @@ const port = process.env.PORT || 3000;
 // --- ЗАПУСК СЕРВЕРА ---
 const server = app.listen(port, () => {
     console.log('API запущен на порту', port);
-});
\ No newline at end of file
+});// === WebSocket /ws/insights ===
+const { WebSocketServer } = require('ws');
+const fs = require('fs');
+const path = require('path');
+
+const wss = new WebSocketServer({ server, path: '/ws/insights' });
+
+const logFiles = [
+  'logs/backend-combined.log',
+  'logs/backend-error.log',
+  'logs/frontend-combined.log',
+  'logs/frontend-error.log'
+];
+
+const clientSettings = new Map();
+
+wss.on('connection', (ws) => {
+  const id = Date.now() + Math.random();
+  clientSettings.set(id, { filter: {}, tail: 5 });
+
+  ws.send(JSON.stringify({ message: 'WebSocket подключен ✅' }));
+
+  ws.on('message', (data) => {
+    try {
+      const msg = JSON.parse(data.toString());
+      if (msg.filter || msg.tail) {
+        clientSettings.set(id, {
+          ...clientSettings.get(id),
+          ...msg
+        });
+        ws.send(JSON.stringify({ ok: true, message: 'Фильтр применён' }));
+      }
+    } catch (err) {
+      ws.send(JSON.stringify({ error: 'Неверный формат JSON-команды' }));
+    }
+  });
+
+  const interval = setInterval(() => {
+    const { filter, tail } = clientSettings.get(id);
+    const logs = [];
+
+    for (const file of logFiles) {
+      try {
+        const fullPath = path.join(__dirname, '..', file);
+        const lines = fs.readFileSync(fullPath, 'utf-8').trim().split('\n').slice(-tail);
+
+        for (const line of lines) {
+          try {
+            const parsed = JSON.parse(line);
+            if (
+              (!filter.label || parsed.label === filter.label) &&
+              (!filter.level || parsed.level === filter.level)
+            ) {
+              logs.push(parsed);
+            }
+          } catch {
+            logs.push({ message: line, source: file });
+          }
+        }
+      } catch (e) {
+        logs.push({ error: `Файл недоступен: ${file}` });
+      }
+    }
+
+    ws.send(JSON.stringify({ timestamp: new Date(), logs }));
+  }, 3000);
+
+  ws.on('close', () => {
+    clearInterval(interval);
+    clientSettings.delete(id);
+  });
+});
+// === /WebSocket ===
\ No newline at end of file
-- 
2.39.2

