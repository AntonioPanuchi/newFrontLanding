#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –ø–æ–ª–∏—Ñ–∏–ª–ª–∞ fetch API
 */

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø–æ–ª–∏—Ñ–∏–ª–ª–∞ fetch API\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ª–∏—Ñ–∏–ª–ª–∞
function needsPolyfill(nodeVersion) {
    const majorVersion = parseInt(nodeVersion.slice(1).split('.')[0], 10);
    return majorVersion < 18;
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ Node.js
const testVersions = [
    'v16.20.0',
    'v17.9.0', 
    'v18.17.0',
    'v20.10.0',
    'v22.17.0'
];

console.log('üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–π:');
testVersions.forEach(version => {
    const needsPoly = needsPolyfill(version);
    const status = needsPoly ? 'üì¶ –ü–æ–ª–∏—Ñ–∏–ª–ª' : '‚úÖ –ù–∞—Ç–∏–≤–Ω—ã–π';
    const majorVersion = parseInt(version.slice(1).split('.')[0], 10);
    
    console.log(`${version}: ${status} (major: ${majorVersion})`);
});

console.log('\nüîç –¢–µ–∫—É—â–∞—è —Å–∏—Å—Ç–µ–º–∞:');
const currentVersion = process.version;
const currentNeedsPoly = needsPolyfill(currentVersion);
const currentStatus = currentNeedsPoly ? 'üì¶ –ü–æ–ª–∏—Ñ–∏–ª–ª' : '‚úÖ –ù–∞—Ç–∏–≤–Ω—ã–π';
const currentMajor = parseInt(currentVersion.slice(1).split('.')[0], 10);

console.log(`${currentVersion}: ${currentStatus} (major: ${currentMajor})`);

console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
console.log('- Node.js < 18: –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–∏—Ñ–∏–ª–ª node-fetch');
console.log('- Node.js >= 18: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞—Ç–∏–≤–Ω—ã–π fetch API');
console.log('- –õ–æ–≥–∏–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–æ–ª–∏—Ñ–∏–ª–ª–∞'); 